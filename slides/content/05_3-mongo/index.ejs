<section>
  <h1>MongoDB</h1>
  <h2>Лекція 5.3</h2>
</section>

<section>
  <h2>Бази даних</h2>

  <section>
    <h3>Зберігають дані</h3>
  </section>

  <section>
    <h3>Використовують спеціалізовані структури</h3>

    <ul>
      <li>Heap файли</li>
      <li>Hash таблиці</li>
      <li>B+ дерева</li>
    </ul>
  </section>
</section>

<section>
  <h2>Типи баз даних</h2>

  <section>
    <h3>Реляційні (Relational)</h3>

    <img src="images/db-type-relational.jpg" />
  </section>

  <section>
    <h3>Реляційні (Relational)</h3>

    <ul>
      <li>MySQL</li>
      <li>PostgreSQL</li>
      <li>Oracle</li>
    </ul>
  </section>

  <section>
    <h3>Ключ-значення (Key-Value)</h3>

    <img src="images/db-type-key-value.png" />
  </section>

  <section>
    <h3>Ключ-значення (Key-Value)</h3>

    <ul>
      <li>Redis</li>
      <li>Dynamo</li>
      <li>MemcacheDB</li>
    </ul>
  </section>

  <section>
    <h3>Документні (Document-oriented)</h3>

    <img src="images/db-type-document.png" />
  </section>

  <section>
    <h3>Документні (Document-oriented)</h3>

    <ul>
      <li>MongoDB</li>
      <li>CouchDB</li>
      <li>RethinkDB</li>
    </ul>
  </section>

  <section>
    <h3>Колоночні (Column-oriented)</h3>

    <img src="images/db-type-column.png" />
  </section>

  <section>
    <h3>Колоночні (Column-oriented)</h3>

    <ul>
      <li>MariaDB</li>
      <li>IBM Db2</li>
      <li>SAP HANA</li>
    </ul>
  </section>

  <section>
    <h3>Графові (Graph database)</h3>

    <img src="images/db-type-graph.png" />
  </section>

  <section>
    <h3>Графові (Graph database)</h3>

    <ul>
      <li>Neo4j</li>
      <li>OrientDB</li>
      <li>Dgraph</li>
    </ul>
  </section>

  <section>
    <h3>CAP теорема</h3>

    <img src="images/db-cap.png" />
  </section>
</section>

<section>
  <h2>MongoDB</h2>

  <section>
    <h3>Інсталяція</h3>

    <a href="https://www.mongodb.com/download-center#community">з сайту</a>
  </section>

  <section>
    <h3>Документ</h3>

    <img src="images/db-mongo-document.svg" />
  </section>

  <section>
    <h3>Колекції</h3>

    <img src="images/db-mongo-collection.svg" />
  </section>

  <section>
    <h3>Ідентифікатор</h3>

    <img src="images/db-mongo-id.png" />
  </section>
</section>

<section>
  <h2>Драйвер mongodb</h2>

  <section>
    <h3>Інсталяція</h3>

    <pre><code class="hljs" data-trim contenteditable>
$ npm install --save mongodb
    </code></pre>
  </section>

  <section>
    <h3>Імпорт</h3>

    <pre><code class="hljs" data-trim contenteditable>
const mongodb = require('mongodb');
const MongoClient = mongodb.MongoClient;
    </code></pre>
  </section>

  <section>
    <h3>Connection string</h3>

    <pre><code class="hljs" data-trim contenteditable>
const mongoUrl = 'mongodb://localhost:27017/02-server';
    </code></pre>
  </section>

  <section>
    <h3>З'єднання</h3>

    <pre><code class="hljs" data-trim contenteditable>
let mongo;
MongoClient
  .connect(mongoUrl)
  .then(function(client) {
    mongo = client.db();
  });
    </code></pre>
  </section>

  <section>
    <h3>Створення</h3>

    <pre><code class="hljs" data-trim contenteditable>
mongo
  .collection('students')
  .insert({
    firstName: 'Петро',
    lastName: 'Петровський'
  })
  .then(function() {
    console.log('Запис створено');
  });
    </code></pre>
  </section>

  <section>
    <h3>Отримання набору</h3>

    <pre><code class="hljs" data-trim contenteditable>
mongo
  .collection('students')
  .find()
  .toArray()
  .then(function(students) {
    console.log(students);
  });
    </code></pre>
  </section>

  <section>
    <h3>Пошук елементів</h3>

    <pre><code class="hljs" data-trim contenteditable>
mongo
  .collection('students')
  .findOne({
    firstName: 'Василь'
  })
  .then(function(vasyl) {
    console.log(vasyl);
  });
    </code></pre>
  </section>

  <section>
    <h3>Отримання одного елементу</h3>

    <pre><code class="hljs" data-trim contenteditable>
mongo
  .collection('students')
  .find({
    firstName: 'Василь'
  })
  .toArray()
  .then(function(students) {
    console.log(students);
  });
    </code></pre>
  </section>

  <section>
    <h3>Зміна</h3>

    <pre><code class="hljs" data-trim contenteditable>
mongo
  .collection('students')
  .update({
    firstName: 'Петро',
    lastName: 'Петровський'
  }, {
    lastName: 'Івановський'
  })
  .then(function() {
    console.log('Запис оновлено');
  });
    </code></pre>
  </section>

  <section>
    <h3>Видалення</h3>

    <pre><code class="hljs" data-trim contenteditable>
mongo
  .collection('students')
  .remove({
    firstName: 'Петро',
    lastName: 'Івановський'
  })
  .then(function() {
    console.log('Запис видалено');
  });
    </code></pre>
  </section>
</section>

<section>
  <h2>mongodb можливості</h2>

  <section>
    <h3>Агрегація</h3>

    <img src="images/db-mongodb-aggregation.png" />
  </section>

  <section>
    <h3>Map-reduce</h3>

    <img src="images/db-mongodb-map-reduce.png" />
  </section>
</section>

<section>
  <h2>ORM mongoose</h2>

  <section>
    <h3>Інсталяція</h3>

    <pre><code class="hljs" data-trim contenteditable>
$ npm install --save mongoose
    </code></pre>
  </section>

  <section>
    <h3>Імпорт</h3>

    <pre><code class="hljs" data-trim contenteditable>
const mongoose = require('mongoose');
    </code></pre>
  </section>

  <section>
    <h3>Connection string</h3>

    <pre><code class="hljs" data-trim contenteditable>
const mongoUrl = 'mongodb://localhost:27017/02-server';
    </code></pre>
  </section>

  <section>
    <h3>З'єднання</h3>

    <pre><code class="hljs" data-trim contenteditable>
mongoose.Promise = global.Promise
mongoose.connect(mongoUrl, { useMongoClient: true });
const db = mongoose.connection;
    </code></pre>
  </section>

  <section>
    <h3>Схема</h3>

    <pre><code class="hljs" data-trim contenteditable>
const studentSchema = mongoose.Schema({
  firstName: String,
  lastName: String,
  year: Number
});
    </code></pre>
  </section>

  <section>
    <h3>Модель</h3>

    <pre><code class="hljs" data-trim contenteditable>
const Student = mongoose.model('Student', studentSchema);
    </code></pre>
  </section>

  <section>
    <h3>Створення</h3>

    <pre><code class="hljs" data-trim contenteditable>
const petro = new Student({
  firstName: 'Петро',
  lastName: 'Петровський'
});
    </code></pre>
  </section>

  <section>
    <h3>Збереження</h3>

    <pre><code class="hljs" data-trim contenteditable>
petro
  .save()
  .then(function() {
    console.log('Запис створено');
  });
    </code></pre>
  </section>

  <section>
    <h3>Отримання набору</h3>

    <pre><code class="hljs" data-trim contenteditable>
Student
  .find()
  .then(function(students) {
    console.log(students);
  });
    </code></pre>
  </section>

  <section>
    <h3>Пошук елементів</h3>

    <pre><code class="hljs" data-trim contenteditable>
Student
  .find({
    firstName: 'Петро'
  })
  .then(function(students) {
    console.log(students);
  });
    </code></pre>
  </section>

  <section>
    <h3>Отримання одного елементу</h3>

    <pre><code class="hljs" data-trim contenteditable>
Student
  .findOne({
    firstName: 'Петро'
  })
  .then(function(petro) {
    console.log(petro);
  });
    </code></pre>
  </section>

  <section>
    <h3>Зміна</h3>

    <pre><code class="hljs" data-trim contenteditable>
Student
  .findOne({
    firstName: 'Петро',
    lastName: 'Петровський'
  })
  .then(function(petro) {
    petro.lastName = 'Івановський';
    petro
      .save()
      .then(function() {
        console.log('Запис оновлено');
      });
  });
    </code></pre>
  </section>

  <section>
    <h3>Видалення</h3>

    <pre><code class="hljs" data-trim contenteditable>
Student
  .findOne({
    firstName: 'Петро',
    lastName: 'Івановський'
  })
  .then(function(petro) {
    petro
      .remove()
      .then(function() {
        console.log('Запис видалено');
      });
  });
    </code></pre>
  </section>
</section>

<section>
  <h2>mongoose можливості</h2>

  <section>
    <h3>Складні запити</h3>

    <pre><code class="hljs" data-trim contenteditable>
Person.
  find({ occupation: /host/ }).
  where('name.last').equals('Ghost').
  where('age').gt(17).lt(66).
  where('likes').in(['vaporizing', 'talking']).
  limit(10).
  sort('-occupation').
  select('name occupation').
  exec(callback);
    </code></pre>
  </section>

  <section>
    <h3>Під-документи</h3>

    <pre><code class="hljs" data-trim contenteditable>
const childSchema = new Schema({ name: 'string' });

const parentSchema = new Schema({
  children: [childSchema],
  child: childSchema
});
    </code></pre>
  </section>

  <section>
    <h3>Валідація</h3>

    <pre><code class="hljs" data-trim contenteditable>
const breakfastSchema = new Schema({
  eggs: {
    type: Number,
    min: [6, 'Too few eggs'],
    max: 12
  },
  bacon: {
    type: Number,
    required: [true, 'Why no bacon?']
  },
  drink: {
    type: String,
    enum: ['Coffee', 'Tea'],
    required: function() {
      return this.bacon &gt; 3;
    }
  }
});
    </code></pre>
  </section>

  <section>
    <h3>Методи</h3>

    <pre><code class="hljs" data-trim contenteditable>
const AnimalSchema = new Schema({
  name: String,
  type: String
});

AnimalSchema.methods.findSimilarType = function findSimilarType() {
  return this.model('Animal').find({ type: this.type });
};
    </code></pre>
  </section>
</section>

<section>
  <h2>Питання?</h2>
</section>
